$PBExportHeader$f_find_pager_id.srf
global type f_find_pager_id from function_object
end type

forward prototypes
global function boolean f_find_pager_id (string dept, ref string employee, ref string employeeid, ref string pagerid, ref string capecode, string roomnum, datetime timerstart)
end prototypes

global function boolean f_find_pager_id (string dept, ref string employee, ref string employeeid, ref string pagerid, ref string capecode, string roomnum, datetime timerstart);string last_stack, qc_ind
string pagers[], stack[], emp[], empNum[]
string pager_to_assign, zone_grp, all_zone, zone_code
boolean no_stack
int i, j
no_stack = false	
all_zone='Z0'


if f_is_a_quickcall(dept,timerstart) then //force dept to QUICKCALL
	if f_quickcall_pager_available() then
		dept='QUICKCALL'
//	else use default dept 
	end if
else
	if not f_default_pager_available(dept) then // to make sure default pager is available.
		if f_quickcall_pager_available() then // default pager is not available and quickcall pager is
			dept='QUICKCALL'		
	// else use default dept when both default and quickcall are not available	
		end if
//	else use default dept
	end if
end if
	
select unit_type, zone_group_code
into	:zone_code, :zone_grp
from	area
where	area_number = :roomnum;
if sqlca.sqlcode < 0 then
	egm_sqlerror(sqlca)
	return false
end if
/*
select pagers.stack_seq
into	:last_stack
from pager_emp, pagers, instemp
where (pager_emp.emp_id = instemp.employee_number) and  
		(pager_emp.pager_id = pagers.pager_id) and
		instemp.dept = :dept and
		(pagers.zone_code = :zone_code or pagers.zone_code = :zone_grp or pagers.zone_code = :all_zone) and //pager with zone Z0 qualify for all area
		pager_emp.pager_id = (select FIRST pager_id from pageassignment where
		datetime(pageassignment.time_assigned) = 
		(select max(datetime(time_assigned)) from pageassignment, pager_emp
			where pageassignment.pager_id = pager_emp.pager_id and dept_assigned = :dept));
*/		
/* the following use dept from instemp table instead of dept from pageassignment for quickcall changes */
select  min(c.stack_seq) // to prevent multiple call with exact time_assigned
into	  :last_stack
from    pageassignment a, pager_emp b, pagers c, instemp d
where   time_assigned=(select max(time_assigned) 
            from pageassignment, instemp where dept=:dept and emp_id=employee_number ) 
and     a.emp_id=b.emp_id 
and     b.pager_id=c.pager_id
and     (c.zone_code = :zone_code or c.zone_code = :zone_grp  or c.zone_code = :all_zone)
and     b.emp_id=d.employee_number
and     d.dept=:dept;

if sqlca.sqlcode = 100 then
	no_stack = true
else
	if isnull(last_stack) then
		no_stack = true
	end if
end if		
		
if sqlca.sqlcode < 0 then
	egm_sqlerror(sqlca)
	return false
end if


 DECLARE pager CURSOR FOR  
 select pager_emp.pager_id, stack_seq, employee,  employee_number
	from pager_emp, pagers, instemp 
	where pager_emp.emp_id = employee_number and
			pager_emp.pager_id = pagers.pager_id and
			active_ind = 'Y' and
			instemp.dept = :dept and
			(pagers.zone_code = :zone_code or pagers.zone_code = :zone_grp or pagers.zone_code = :all_zone) //pager with zone 99 qualify for all area 
	order by stack_seq;

 OPEN pager;
 i = 1
 FETCH pager INTO :pagers[i], :stack[i], :emp[i], :empNum[i];
 DO WHILE SQLCA.sqlcode = 0
	i++
	FETCH pager INTO :pagers[i], :stack[i], :emp[i], :empNum[i];
 LOOP
// i= i -1;
 close pager;

// MessageBox("max",string(i -1))	
 if (i - 1 = 0) then  // no pager found
	 employee = ''
	 pagerid = ''
	 return false
 end if

 if (stack[i -1] = last_stack or ((i - 1) = 1) or no_stack) then
	 pagerid = pagers[1]
	 employee = emp[1]
	 employeeid = empNum[1]
 else
 	j = 1
	do while j <= i
		if stack[j] = last_stack then
			pagerid = pagers[j+1]
			employee = emp[j+1]
			employeeid = empNum[j+1]
			j = i
		end if
		j++
 	loop
 end if
 
 return true
end function

