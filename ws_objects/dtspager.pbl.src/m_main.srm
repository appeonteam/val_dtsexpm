$PBExportHeader$m_main.srm
forward
global type m_main from menu
end type
type m_file from menu within m_main
end type
type m_print from menu within m_file
end type
type m_printsetup from menu within m_file
end type
type m_- from menu within m_file
end type
type m_close from menu within m_file
end type
type m_-1 from menu within m_file
end type
type m_exit from menu within m_file
end type
type m_file from menu within m_main
m_print m_print
m_printsetup m_printsetup
m_- m_-
m_close m_close
m_-1 m_-1
m_exit m_exit
end type
type m_edit from menu within m_main
end type
type m_pagers from menu within m_edit
end type
type m_resendtaskmsg from menu within m_edit
end type
type m_manualpaging from menu within m_edit
end type
type m_purgepageassignementtransaction from menu within m_edit
end type
type m_systemsettings from menu within m_edit
end type
type m_edit from menu within m_main
m_pagers m_pagers
m_resendtaskmsg m_resendtaskmsg
m_manualpaging m_manualpaging
m_purgepageassignementtransaction m_purgepageassignementtransaction
m_systemsettings m_systemsettings
end type
type m_report from menu within m_main
end type
type m_pageassignment from menu within m_report
end type
type m_pagersactivatedeactivate from menu within m_report
end type
type m_report from menu within m_main
m_pageassignment m_pageassignment
m_pagersactivatedeactivate m_pagersactivatedeactivate
end type
type m_window from menu within m_main
end type
type m_title from menu within m_window
end type
type m_layer from menu within m_window
end type
type m_cascade from menu within m_window
end type
type m_window from menu within m_main
m_title m_title
m_layer m_layer
m_cascade m_cascade
end type
type m_help from menu within m_main
end type
type m_test from menu within m_main
end type
type m_test1 from menu within m_test
end type
type m_tap from menu within m_test
end type
type m_testdialup from menu within m_test
end type
type m_options from menu within m_test
end type
type m_test from menu within m_main
m_test1 m_test1
m_tap m_tap
m_testdialup m_testdialup
m_options m_options
end type
global type m_main from menu
m_file m_file
m_edit m_edit
m_report m_report
m_window m_window
m_help m_help
m_test m_test
end type
end forward

global type m_main from menu
m_file m_file
m_edit m_edit
m_report m_report
m_window m_window
m_help m_help
m_test m_test
end type
global m_main m_main

on m_main.create
m_main=this
call super::create
this.m_file=create m_file
this.m_edit=create m_edit
this.m_report=create m_report
this.m_window=create m_window
this.m_help=create m_help
this.m_test=create m_test
this.Item[UpperBound(this.Item)+1]=this.m_file
this.Item[UpperBound(this.Item)+1]=this.m_edit
this.Item[UpperBound(this.Item)+1]=this.m_report
this.Item[UpperBound(this.Item)+1]=this.m_window
this.Item[UpperBound(this.Item)+1]=this.m_help
this.Item[UpperBound(this.Item)+1]=this.m_test
end on

on m_main.destroy
call super::destroy
destroy(this.m_file)
destroy(this.m_edit)
destroy(this.m_report)
destroy(this.m_window)
destroy(this.m_help)
destroy(this.m_test)
end on

type m_file from menu within m_main
m_print m_print
m_printsetup m_printsetup
m_- m_-
m_close m_close
m_-1 m_-1
m_exit m_exit
end type

on m_file.create
call super::create
this.text = "&File"
this.m_print=create m_print
this.m_printsetup=create m_printsetup
this.m_-=create m_-
this.m_close=create m_close
this.m_-1=create m_-1
this.m_exit=create m_exit
this.Item[UpperBound(this.Item)+1]=this.m_print
this.Item[UpperBound(this.Item)+1]=this.m_printsetup
this.Item[UpperBound(this.Item)+1]=this.m_-
this.Item[UpperBound(this.Item)+1]=this.m_close
this.Item[UpperBound(this.Item)+1]=this.m_-1
this.Item[UpperBound(this.Item)+1]=this.m_exit
end on

on m_file.destroy
call super::destroy
destroy(this.m_print)
destroy(this.m_printsetup)
destroy(this.m_-)
destroy(this.m_close)
destroy(this.m_-1)
destroy(this.m_exit)
end on

type m_print from menu within m_file
end type

on m_print.create
call super::create
this.text = "&Print"
this.enabled = false
this.toolbaritemname = "Report!"
this.toolbaritemtext = "Print"
this.toolbaritemorder = 40
this.toolbaritemspace = 1
end on

on m_print.destroy
call super::destroy
end on

event clicked;w_main.GetActiveSheet().TriggerEvent("ue_printrpt")
end event

type m_printsetup from menu within m_file
end type

on m_printsetup.create
call super::create
this.text = "Print &Setup"
this.toolbaritemname = "Report5!"
this.toolbaritemtext = "Print Setup"
this.toolbaritemorder = 41
end on

event clicked;printsetup()
end event

on m_printsetup.destroy
call super::destroy
end on

type m_- from menu within m_file
end type

on m_-.create
call super::create
this.text = "-"
end on

on m_-.destroy
call super::destroy
end on

type m_close from menu within m_file
end type

on m_close.create
call super::create
this.text = "&Close"
this.enabled = false
this.toolbaritemname = "Exit!"
this.toolbaritemtext = "Close"
this.toolbaritemorder = 88
this.toolbaritemspace = 1
end on

event clicked;close(w_main.GetActiveSheet())
if isvalid(w_main.GetActiveSheet()) then
else
	this.Enabled = false
	m_main.m_file.m_print.Enabled = false
end if
end event

on m_close.destroy
call super::destroy
end on

type m_-1 from menu within m_file
end type

on m_-1.create
call super::create
this.text = "-"
end on

on m_-1.destroy
call super::destroy
end on

type m_exit from menu within m_file
end type

on m_exit.create
call super::create
this.text = "E&xit"
this.toolbaritemname = "EXIT.BMP"
this.toolbaritemtext = "Exit"
this.toolbaritemorder = 99
this.toolbaritemspace = 1
end on

event clicked;halt close
end event

on m_exit.destroy
call super::destroy
end on

type m_edit from menu within m_main
m_pagers m_pagers
m_resendtaskmsg m_resendtaskmsg
m_manualpaging m_manualpaging
m_purgepageassignementtransaction m_purgepageassignementtransaction
m_systemsettings m_systemsettings
end type

on m_edit.create
call super::create
this.text = "&Edit"
this.m_pagers=create m_pagers
this.m_resendtaskmsg=create m_resendtaskmsg
this.m_manualpaging=create m_manualpaging
this.m_purgepageassignementtransaction=create m_purgepageassignementtransaction
this.m_systemsettings=create m_systemsettings
this.Item[UpperBound(this.Item)+1]=this.m_pagers
this.Item[UpperBound(this.Item)+1]=this.m_resendtaskmsg
this.Item[UpperBound(this.Item)+1]=this.m_manualpaging
this.Item[UpperBound(this.Item)+1]=this.m_purgepageassignementtransaction
this.Item[UpperBound(this.Item)+1]=this.m_systemsettings
end on

on m_edit.destroy
call super::destroy
destroy(this.m_pagers)
destroy(this.m_resendtaskmsg)
destroy(this.m_manualpaging)
destroy(this.m_purgepageassignementtransaction)
destroy(this.m_systemsettings)
end on

type m_pagers from menu within m_edit
end type

on m_pagers.create
call super::create
this.text = "&Table Update"
this.toolbaritemname = "CreateTable!"
this.toolbaritemtext = "Table Update"
this.toolbaritemorder = 10
end on

event clicked;SetPointer(HourGlass!)
If Is_PasswordOK( Get_Event_Security( "BO" ) ) Then
	OpenSheet( w_table_upd, "w_table_upd", w_main, 0, Original! )
	m_main.m_file.m_close.Enabled = true
	m_main.m_file.m_print.Enabled = true
else
	return
end if
end event

on m_pagers.destroy
call super::destroy
end on

type m_resendtaskmsg from menu within m_edit
end type

event clicked;m_main.m_file.m_close.Enabled = true
m_main.m_file.m_print.Enabled = true
OpenSheet( w_send_page, "w_send_page", w_main, 0, Original! )

end event

on m_resendtaskmsg.create
call super::create
this.text = "&Auto Paging"
this.toolbaritemname = "PAGER.BMP"
this.toolbaritemtext = "Auto Paging"
this.toolbaritemorder = 5
end on

on m_resendtaskmsg.destroy
call super::destroy
end on

type m_manualpaging from menu within m_edit
end type

event clicked;OpenSheet( w_manual_paging, "w_manual_paging", w_main, 0, Original! )
end event

on m_manualpaging.create
call super::create
this.text = "Manual Paging"
end on

on m_manualpaging.destroy
call super::destroy
end on

type m_purgepageassignementtransaction from menu within m_edit
end type

on m_purgepageassignementtransaction.create
call super::create
this.text = "&Purge Page Assignement Transaction"
this.toolbaritemname = "Custom021!"
this.toolbaritemtext = "Purge Transaction"
this.toolbaritemorder = 15
end on

event clicked;SetPointer(HourGlass!)
If Is_PasswordOK( Get_Event_Security( "BO" ) ) Then
	OpenSheetWithParm( w_purge, "w_purge", w_main, 0, Original! )
	m_main.m_file.m_close.Enabled = true
	m_main.m_file.m_print.Enabled = true
else
	return
end if
end event

on m_purgepageassignementtransaction.destroy
call super::destroy
end on

type m_systemsettings from menu within m_edit
end type

event clicked;open ( w_settings)
end event

on m_systemsettings.create
call super::create
this.text = "System Settings"
this.toolbaritemname = "StyleLibraryList5!"
this.toolbaritemtext = "Settings"
this.toolbaritemorder = 77
end on

on m_systemsettings.destroy
call super::destroy
end on

type m_report from menu within m_main
m_pageassignment m_pageassignment
m_pagersactivatedeactivate m_pagersactivatedeactivate
end type

on m_report.create
call super::create
this.text = "&View"
this.toolbaritemorder = 20
this.m_pageassignment=create m_pageassignment
this.m_pagersactivatedeactivate=create m_pagersactivatedeactivate
this.Item[UpperBound(this.Item)+1]=this.m_pageassignment
this.Item[UpperBound(this.Item)+1]=this.m_pagersactivatedeactivate
end on

on m_report.destroy
call super::destroy
destroy(this.m_pageassignment)
destroy(this.m_pagersactivatedeactivate)
end on

type m_pageassignment from menu within m_report
end type

on m_pageassignment.create
call super::create
this.text = "&Page Assignment"
this.toolbaritemname = "PAPERPRF.BMP"
this.toolbaritemtext = "Page Assignment Report"
this.toolbaritemorder = 20
this.toolbaritemspace = 1
end on

event clicked;SetPointer(HourGlass!)
If Is_PasswordOK( Get_Event_Security( "BO" ) ) Then
	OpenSheetWithParm( w_page_task_assignment, "w_page_task_assignment", w_main, 0, Original! )
	m_main.m_file.m_close.Enabled = true
	m_main.m_file.m_print.Enabled = true
else
	return
end if
end event

on m_pageassignment.destroy
call super::destroy
end on

type m_pagersactivatedeactivate from menu within m_report
end type

on m_pagersactivatedeactivate.create
call super::create
this.text = "Pagers &Activate/Deactivate"
this.toolbaritemname = "MEMO.BMP"
this.toolbaritemtext = "Pager Activation Report"
this.toolbaritemorder = 25
end on

event clicked;SetPointer(HourGlass!)
If Is_PasswordOK( Get_Event_Security( "QO" ) ) Then
	OpenSheetWithParm( w_pager_activate,"w_pager_activate", w_main, 0, Original! )
	m_main.m_file.m_close.Enabled = true
	m_main.m_file.m_print.Enabled = true
else
	return
end if
end event

on m_pagersactivatedeactivate.destroy
call super::destroy
end on

type m_window from menu within m_main
m_title m_title
m_layer m_layer
m_cascade m_cascade
end type

on m_window.create
call super::create
this.text = "&Window"
this.toolbaritemspace = 1
this.m_title=create m_title
this.m_layer=create m_layer
this.m_cascade=create m_cascade
this.Item[UpperBound(this.Item)+1]=this.m_title
this.Item[UpperBound(this.Item)+1]=this.m_layer
this.Item[UpperBound(this.Item)+1]=this.m_cascade
end on

on m_window.destroy
call super::destroy
destroy(this.m_title)
destroy(this.m_layer)
destroy(this.m_cascade)
end on

type m_title from menu within m_window
end type

event clicked;SetPointer( HourGlass! )

ParentWindow.Arrangesheets( Tile! )
end event

on m_title.create
call super::create
this.text = "&Tile"
this.toolbaritemname = "Tile!"
this.toolbaritemtext = "Tile"
this.toolbaritemorder = 30
this.toolbaritemspace = 1
end on

on m_title.destroy
call super::destroy
end on

type m_layer from menu within m_window
end type

event clicked;SetPointer( HourGlass! )

ParentWindow.Arrangesheets( Layer! )
end event

on m_layer.create
call super::create
this.text = "&Layer"
this.toolbaritemname = "Layer!"
this.toolbaritemtext = "Layer"
this.toolbaritemorder = 31
end on

on m_layer.destroy
call super::destroy
end on

type m_cascade from menu within m_window
end type

event clicked;SetPointer( HourGlass! )

ParentWindow.Arrangesheets( Cascade! )
end event

on m_cascade.create
call super::create
this.text = "&Cascade"
this.toolbaritemname = "Cascade!"
this.toolbaritemtext = "Cascade"
this.toolbaritemorder = 32
end on

on m_cascade.destroy
call super::destroy
end on

type m_help from menu within m_main
end type

on m_help.create
call super::create
this.visible = false
this.text = "&Help"
end on

on m_help.destroy
call super::destroy
end on

type m_test from menu within m_main
m_test1 m_test1
m_tap m_tap
m_testdialup m_testdialup
m_options m_options
end type

on m_test.create
call super::create
this.visible = false
this.text = "Test"
this.enabled = false
this.m_test1=create m_test1
this.m_tap=create m_tap
this.m_testdialup=create m_testdialup
this.m_options=create m_options
this.Item[UpperBound(this.Item)+1]=this.m_test1
this.Item[UpperBound(this.Item)+1]=this.m_tap
this.Item[UpperBound(this.Item)+1]=this.m_testdialup
this.Item[UpperBound(this.Item)+1]=this.m_options
end on

on m_test.destroy
call super::destroy
destroy(this.m_test1)
destroy(this.m_tap)
destroy(this.m_testdialup)
destroy(this.m_options)
end on

type m_test1 from menu within m_test
end type

event clicked;open (w_test)
end event

on m_test1.create
call super::create
this.text = "Test Nextel"
end on

on m_test1.destroy
call super::destroy
end on

type m_tap from menu within m_test
end type

event clicked;open (w_test_tap)
end event

on m_tap.create
call super::create
this.text = "Test TAP"
end on

on m_tap.destroy
call super::destroy
end on

type m_testdialup from menu within m_test
end type

event clicked;open (w_test_dialup)
end event

on m_testdialup.create
call super::create
this.text = "Test Dialup"
end on

on m_testdialup.destroy
call super::destroy
end on

type m_options from menu within m_test
end type

on m_options.create
call super::create
this.text = "Test TCP/SNPP"
end on

event clicked;open (w_test_tcp)
end event

on m_options.destroy
call super::destroy
end on

